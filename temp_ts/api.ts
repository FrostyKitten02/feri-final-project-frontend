/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddPersonToProjectRequest
 */
export interface AddPersonToProjectRequest {
    /**
     * 
     * @type {string}
     * @memberof AddPersonToProjectRequest
     */
    'personId'?: string;
}
/**
 * 
 * @export
 * @interface AddPersonToTaskRequest
 */
export interface AddPersonToTaskRequest {
    /**
     * 
     * @type {number}
     * @memberof AddPersonToTaskRequest
     * @deprecated
     */
    'occupancy'?: number;
    /**
     * 
     * @type {string}
     * @memberof AddPersonToTaskRequest
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddPersonToTaskRequest
     */
    'endDate'?: string;
}
/**
 * 
 * @export
 * @interface CreateOccupancyRequest
 */
export interface CreateOccupancyRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateOccupancyRequest
     */
    'personId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOccupancyRequest
     */
    'projectId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOccupancyRequest
     */
    'fromMonth'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOccupancyRequest
     */
    'toMonth'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateOccupancyRequest
     */
    'value'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateOccupancyRequest
     */
    'endDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOccupancyRequest
     */
    'startDate'?: string;
}
/**
 * 
 * @export
 * @interface CreatePersonTypeRequest
 */
export interface CreatePersonTypeRequest {
    /**
     * 
     * @type {string}
     * @memberof CreatePersonTypeRequest
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreatePersonTypeRequest
     */
    'research'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePersonTypeRequest
     */
    'educate'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonTypeRequest
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonTypeRequest
     */
    'endDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonTypeRequest
     */
    'personId'?: string;
}
/**
 * 
 * @export
 * @interface CreateProjectRequest
 */
export interface CreateProjectRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateProjectRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectRequest
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectRequest
     */
    'endDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectRequest
     */
    'projectBudgetSchemaId'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateProjectRequest
     */
    'staffBudget'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateProjectRequest
     */
    'travelBudget'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateProjectRequest
     */
    'equipmentBudget'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateProjectRequest
     */
    'subcontractingBudget'?: number;
}
/**
 * 
 * @export
 * @interface CreateSalaryRequest
 */
export interface CreateSalaryRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateSalaryRequest
     */
    'personId'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateSalaryRequest
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateSalaryRequest
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateSalaryRequest
     */
    'endDate'?: string;
}
/**
 * 
 * @export
 * @interface CreateTaskRequest
 */
export interface CreateTaskRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateTaskRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTaskRequest
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTaskRequest
     */
    'endDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateTaskRequest
     */
    'isRelevant'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateTaskRequest
     */
    'workPackageId'?: string;
}
/**
 * 
 * @export
 * @interface CreateWorkPackageRequest
 */
export interface CreateWorkPackageRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateWorkPackageRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkPackageRequest
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkPackageRequest
     */
    'endDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateWorkPackageRequest
     */
    'isRelevant'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CreateWorkPackageRequest
     */
    'assignedPM'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkPackageRequest
     */
    'projectId'?: string;
}
/**
 * 
 * @export
 * @interface GetPeopleResponse
 */
export interface GetPeopleResponse {
    /**
     * 
     * @type {Array<PersonDto>}
     * @memberof GetPeopleResponse
     */
    'people'?: Array<PersonDto>;
    /**
     * 
     * @type {string}
     * @memberof GetPeopleResponse
     */
    'projectId'?: string;
}
/**
 * 
 * @export
 * @interface GetPersonResponse
 */
export interface GetPersonResponse {
    /**
     * 
     * @type {PersonDto}
     * @memberof GetPersonResponse
     */
    'person'?: PersonDto;
    /**
     * 
     * @type {SalaryDto}
     * @memberof GetPersonResponse
     */
    'currentSalary'?: SalaryDto;
}
/**
 * 
 * @export
 * @interface GetProjectResponse
 */
export interface GetProjectResponse {
    /**
     * 
     * @type {ProjectDto}
     * @memberof GetProjectResponse
     */
    'projectDto'?: ProjectDto;
}
/**
 * 
 * @export
 * @interface ListProjectBudgetSchemaResponse
 */
export interface ListProjectBudgetSchemaResponse {
    /**
     * 
     * @type {Array<ProjectBudgetSchemaDto>}
     * @memberof ListProjectBudgetSchemaResponse
     */
    'projectBudgetSchemaDtoList'?: Array<ProjectBudgetSchemaDto>;
}
/**
 * 
 * @export
 * @interface ListProjectResponse
 */
export interface ListProjectResponse {
    /**
     * 
     * @type {Array<ProjectDto>}
     * @memberof ListProjectResponse
     */
    'projects'?: Array<ProjectDto>;
    /**
     * 
     * @type {PageInfo}
     * @memberof ListProjectResponse
     */
    'pageInfo'?: PageInfo;
    /**
     * 
     * @type {SortInfoResponseObject}
     * @memberof ListProjectResponse
     */
    'sortInfo'?: SortInfoResponseObject;
}
/**
 * 
 * @export
 * @interface PageInfo
 */
export interface PageInfo {
    /**
     * 
     * @type {number}
     * @memberof PageInfo
     */
    'elementsPerPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfo
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfo
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageInfo
     */
    'lastPage'?: boolean;
}
/**
 * 
 * @export
 * @interface PageInfoRequest
 */
export interface PageInfoRequest {
    /**
     * 
     * @type {number}
     * @memberof PageInfoRequest
     */
    'elementsPerPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoRequest
     */
    'pageNumber'?: number;
}
/**
 * 
 * @export
 * @interface PersonDto
 */
export interface PersonDto {
    /**
     * 
     * @type {string}
     * @memberof PersonDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonDto
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonDto
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface PersonWorkDto
 */
export interface PersonWorkDto {
    /**
     * 
     * @type {string}
     * @memberof PersonWorkDto
     */
    'personId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonWorkDto
     */
    'occupancyId'?: string;
    /**
     * 
     * @type {number}
     * @memberof PersonWorkDto
     */
    'totalWorkPm'?: number;
    /**
     * 
     * @type {number}
     * @memberof PersonWorkDto
     */
    'avgSalary'?: number;
}
/**
 * 
 * @export
 * @interface ProjectBudgetSchemaDto
 */
export interface ProjectBudgetSchemaDto {
    /**
     * 
     * @type {string}
     * @memberof ProjectBudgetSchemaDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectBudgetSchemaDto
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProjectBudgetSchemaDto
     */
    'sofinancing'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectBudgetSchemaDto
     */
    'indirectBudget'?: number;
}
/**
 * 
 * @export
 * @interface ProjectDto
 */
export interface ProjectDto {
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    'ownerId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    'endDate'?: string;
    /**
     * 
     * @type {Array<WorkPackageDto>}
     * @memberof ProjectDto
     */
    'workPackages'?: Array<WorkPackageDto>;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    'projectBudgetSchemaId'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProjectDto
     */
    'peopleCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectDto
     */
    'workPackageCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectDto
     */
    'staffBudget'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectDto
     */
    'travelBudget'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectDto
     */
    'equipmentBudget'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectDto
     */
    'subcontractingBudget'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectDto
     */
    'indirectBudget'?: number;
}
/**
 * 
 * @export
 * @interface ProjectListSearchParams
 */
export interface ProjectListSearchParams {
    /**
     * 
     * @type {string}
     * @memberof ProjectListSearchParams
     */
    'searchStr'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProjectListSearchParams
     */
    'searchOnlyOwnedProjects'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProjectListSearchParams
     */
    'startDateFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectListSearchParams
     */
    'startDateTo'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectListSearchParams
     */
    'endDateFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectListSearchParams
     */
    'endDateTo'?: string;
}
/**
 * 
 * @export
 * @interface ProjectListStatusResponse
 */
export interface ProjectListStatusResponse {
    /**
     * 
     * @type {number}
     * @memberof ProjectListStatusResponse
     */
    'finishedProjects'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectListStatusResponse
     */
    'inProgressProjects'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectListStatusResponse
     */
    'scheduledProjects'?: number;
}
/**
 * 
 * @export
 * @interface ProjectMonthDto
 */
export interface ProjectMonthDto {
    /**
     * 
     * @type {string}
     * @memberof ProjectMonthDto
     */
    'date'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProjectMonthDto
     */
    'monthNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectMonthDto
     */
    'pmBurnDownRate'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectMonthDto
     */
    'actualTotalWorkPm'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectMonthDto
     */
    'actualMonthSpending'?: number;
    /**
     * 
     * @type {Array<PersonWorkDto>}
     * @memberof ProjectMonthDto
     */
    'personWork'?: Array<PersonWorkDto>;
}
/**
 * 
 * @export
 * @interface ProjectSortInfoRequest
 */
export interface ProjectSortInfoRequest {
    /**
     * 
     * @type {boolean}
     * @memberof ProjectSortInfoRequest
     */
    'ascending'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProjectSortInfoRequest
     */
    'fields'?: Array<ProjectSortInfoRequestFieldsEnum>;
}

export const ProjectSortInfoRequestFieldsEnum = {
    CreatedAt: 'CREATED_AT',
    Title: 'TITLE',
    StartDate: 'START_DATE',
    EndDate: 'END_DATE'
} as const;

export type ProjectSortInfoRequestFieldsEnum = typeof ProjectSortInfoRequestFieldsEnum[keyof typeof ProjectSortInfoRequestFieldsEnum];

/**
 * 
 * @export
 * @interface ProjectStatisticsResponse
 */
export interface ProjectStatisticsResponse {
    /**
     * 
     * @type {Array<WorkPackageWithStatisticsDto>}
     * @memberof ProjectStatisticsResponse
     */
    'workPackages'?: Array<WorkPackageWithStatisticsDto>;
    /**
     * 
     * @type {Array<ProjectMonthDto>}
     * @memberof ProjectStatisticsResponse
     */
    'months'?: Array<ProjectMonthDto>;
}
/**
 * 
 * @export
 * @interface ResourceCreatedResponse
 */
export interface ResourceCreatedResponse {
    /**
     * 
     * @type {string}
     * @memberof ResourceCreatedResponse
     */
    'id'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResourceCreatedResponse
     */
    'ids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SalaryDto
 */
export interface SalaryDto {
    /**
     * 
     * @type {string}
     * @memberof SalaryDto
     */
    'personId'?: string;
    /**
     * 
     * @type {number}
     * @memberof SalaryDto
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof SalaryDto
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof SalaryDto
     */
    'endDate'?: string;
}
/**
 * 
 * @export
 * @interface SortInfoResponseObject
 */
export interface SortInfoResponseObject {
    /**
     * 
     * @type {boolean}
     * @memberof SortInfoResponseObject
     */
    'ascending'?: boolean;
    /**
     * 
     * @type {Array<object>}
     * @memberof SortInfoResponseObject
     */
    'fields'?: Array<object>;
}
/**
 * 
 * @export
 * @interface TaskDto
 */
export interface TaskDto {
    /**
     * 
     * @type {string}
     * @memberof TaskDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskDto
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskDto
     */
    'endDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TaskDto
     */
    'isRelevant'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TaskDto
     */
    'workPackageId'?: string;
}
/**
 * 
 * @export
 * @interface UpdateOccupancyRequest
 */
export interface UpdateOccupancyRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateOccupancyRequest
     */
    'occupancyId'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateOccupancyRequest
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @interface UpdateProjectRequest
 */
export interface UpdateProjectRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectRequest
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectRequest
     */
    'endDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectRequest
     */
    'projectBudgetSchemaId'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateProjectRequest
     */
    'staffBudget'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateProjectRequest
     */
    'travelBudget'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateProjectRequest
     */
    'equipmentBudget'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateProjectRequest
     */
    'subcontractingBudget'?: number;
}
/**
 * 
 * @export
 * @interface UpdateProjectResponse
 */
export interface UpdateProjectResponse {
    /**
     * 
     * @type {ProjectDto}
     * @memberof UpdateProjectResponse
     */
    'project'?: ProjectDto;
}
/**
 * 
 * @export
 * @interface UpdateTaskRequest
 */
export interface UpdateTaskRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateTaskRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTaskRequest
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTaskRequest
     */
    'endDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateTaskRequest
     */
    'isRelevant'?: boolean;
}
/**
 * 
 * @export
 * @interface UpdateWorkPackageRequest
 */
export interface UpdateWorkPackageRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateWorkPackageRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateWorkPackageRequest
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateWorkPackageRequest
     */
    'endDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateWorkPackageRequest
     */
    'isRelevant'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof UpdateWorkPackageRequest
     */
    'assignedPM'?: number;
}
/**
 * 
 * @export
 * @interface WorkPackageDto
 */
export interface WorkPackageDto {
    /**
     * 
     * @type {string}
     * @memberof WorkPackageDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkPackageDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkPackageDto
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkPackageDto
     */
    'endDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkPackageDto
     */
    'isRelevant'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkPackageDto
     */
    'projectId'?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkPackageDto
     */
    'assignedPM'?: number;
    /**
     * 
     * @type {Array<TaskDto>}
     * @memberof WorkPackageDto
     */
    'tasks'?: Array<TaskDto>;
}
/**
 * 
 * @export
 * @interface WorkPackageWithStatisticsDto
 */
export interface WorkPackageWithStatisticsDto {
    /**
     * 
     * @type {string}
     * @memberof WorkPackageWithStatisticsDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkPackageWithStatisticsDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkPackageWithStatisticsDto
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkPackageWithStatisticsDto
     */
    'endDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkPackageWithStatisticsDto
     */
    'isRelevant'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkPackageWithStatisticsDto
     */
    'projectId'?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkPackageWithStatisticsDto
     */
    'assignedPM'?: number;
    /**
     * 
     * @type {Array<TaskDto>}
     * @memberof WorkPackageWithStatisticsDto
     */
    'tasks'?: Array<TaskDto>;
    /**
     * 
     * @type {number}
     * @memberof WorkPackageWithStatisticsDto
     */
    'pmBurnDownRate'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkPackageWithStatisticsDto
     */
    'pmBurnDownRatePerTask'?: number;
}

/**
 * OccupancyControllerApi - axios parameter creator
 * @export
 */
export const OccupancyControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateOccupancyRequest} createOccupancyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOccupancy: async (createOccupancyRequest: CreateOccupancyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createOccupancyRequest' is not null or undefined
            assertParamExists('addOccupancy', 'createOccupancyRequest', createOccupancyRequest)
            const localVarPath = `/occupancy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOccupancyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} occupancyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOccupancy: async (occupancyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'occupancyId' is not null or undefined
            assertParamExists('deleteOccupancy', 'occupancyId', occupancyId)
            const localVarPath = `/occupancy/{occupancyId}`
                .replace(`{${"occupancyId"}}`, encodeURIComponent(String(occupancyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateOccupancyRequest} updateOccupancyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOccupancy: async (updateOccupancyRequest: UpdateOccupancyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateOccupancyRequest' is not null or undefined
            assertParamExists('updateOccupancy', 'updateOccupancyRequest', updateOccupancyRequest)
            const localVarPath = `/occupancy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOccupancyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OccupancyControllerApi - functional programming interface
 * @export
 */
export const OccupancyControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OccupancyControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateOccupancyRequest} createOccupancyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOccupancy(createOccupancyRequest: CreateOccupancyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceCreatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOccupancy(createOccupancyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OccupancyControllerApi.addOccupancy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} occupancyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOccupancy(occupancyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOccupancy(occupancyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OccupancyControllerApi.deleteOccupancy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateOccupancyRequest} updateOccupancyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOccupancy(updateOccupancyRequest: UpdateOccupancyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOccupancy(updateOccupancyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OccupancyControllerApi.updateOccupancy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OccupancyControllerApi - factory interface
 * @export
 */
export const OccupancyControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OccupancyControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateOccupancyRequest} createOccupancyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOccupancy(createOccupancyRequest: CreateOccupancyRequest, options?: any): AxiosPromise<ResourceCreatedResponse> {
            return localVarFp.addOccupancy(createOccupancyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} occupancyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOccupancy(occupancyId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteOccupancy(occupancyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateOccupancyRequest} updateOccupancyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOccupancy(updateOccupancyRequest: UpdateOccupancyRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateOccupancy(updateOccupancyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OccupancyControllerApi - object-oriented interface
 * @export
 * @class OccupancyControllerApi
 * @extends {BaseAPI}
 */
export class OccupancyControllerApi extends BaseAPI {
    /**
     * 
     * @param {CreateOccupancyRequest} createOccupancyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OccupancyControllerApi
     */
    public addOccupancy(createOccupancyRequest: CreateOccupancyRequest, options?: RawAxiosRequestConfig) {
        return OccupancyControllerApiFp(this.configuration).addOccupancy(createOccupancyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} occupancyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OccupancyControllerApi
     */
    public deleteOccupancy(occupancyId: string, options?: RawAxiosRequestConfig) {
        return OccupancyControllerApiFp(this.configuration).deleteOccupancy(occupancyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateOccupancyRequest} updateOccupancyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OccupancyControllerApi
     */
    public updateOccupancy(updateOccupancyRequest: UpdateOccupancyRequest, options?: RawAxiosRequestConfig) {
        return OccupancyControllerApiFp(this.configuration).updateOccupancy(updateOccupancyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PersonControllerApi - axios parameter creator
 * @export
 */
export const PersonControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPeople: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/person/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonById: async (personId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getPersonById', 'personId', personId)
            const localVarPath = `/person/{personId}`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonControllerApi - functional programming interface
 * @export
 */
export const PersonControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PersonControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPeople(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PersonDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPeople(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonControllerApi.getAllPeople']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonById(personId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPersonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPersonById(personId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonControllerApi.getPersonById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PersonControllerApi - factory interface
 * @export
 */
export const PersonControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PersonControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPeople(options?: any): AxiosPromise<Array<PersonDto>> {
            return localVarFp.getAllPeople(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} personId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonById(personId: string, options?: any): AxiosPromise<GetPersonResponse> {
            return localVarFp.getPersonById(personId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PersonControllerApi - object-oriented interface
 * @export
 * @class PersonControllerApi
 * @extends {BaseAPI}
 */
export class PersonControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonControllerApi
     */
    public getAllPeople(options?: RawAxiosRequestConfig) {
        return PersonControllerApiFp(this.configuration).getAllPeople(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} personId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonControllerApi
     */
    public getPersonById(personId: string, options?: RawAxiosRequestConfig) {
        return PersonControllerApiFp(this.configuration).getPersonById(personId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PersonTypeControllerApi - axios parameter creator
 * @export
 */
export const PersonTypeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreatePersonTypeRequest} createPersonTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPersonType: async (createPersonTypeRequest: CreatePersonTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPersonTypeRequest' is not null or undefined
            assertParamExists('createPersonType', 'createPersonTypeRequest', createPersonTypeRequest)
            const localVarPath = `/person-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPersonTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonTypeControllerApi - functional programming interface
 * @export
 */
export const PersonTypeControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PersonTypeControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreatePersonTypeRequest} createPersonTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPersonType(createPersonTypeRequest: CreatePersonTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceCreatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPersonType(createPersonTypeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonTypeControllerApi.createPersonType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PersonTypeControllerApi - factory interface
 * @export
 */
export const PersonTypeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PersonTypeControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreatePersonTypeRequest} createPersonTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPersonType(createPersonTypeRequest: CreatePersonTypeRequest, options?: any): AxiosPromise<ResourceCreatedResponse> {
            return localVarFp.createPersonType(createPersonTypeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PersonTypeControllerApi - object-oriented interface
 * @export
 * @class PersonTypeControllerApi
 * @extends {BaseAPI}
 */
export class PersonTypeControllerApi extends BaseAPI {
    /**
     * 
     * @param {CreatePersonTypeRequest} createPersonTypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonTypeControllerApi
     */
    public createPersonType(createPersonTypeRequest: CreatePersonTypeRequest, options?: RawAxiosRequestConfig) {
        return PersonTypeControllerApiFp(this.configuration).createPersonType(createPersonTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProjectBudgetSchemaControllerApi - axios parameter creator
 * @export
 */
export const ProjectBudgetSchemaControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjectBudgetSchema: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/project-budget-schema/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectBudgetSchemaControllerApi - functional programming interface
 * @export
 */
export const ProjectBudgetSchemaControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectBudgetSchemaControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProjectBudgetSchema(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListProjectBudgetSchemaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProjectBudgetSchema(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectBudgetSchemaControllerApi.getAllProjectBudgetSchema']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectBudgetSchemaControllerApi - factory interface
 * @export
 */
export const ProjectBudgetSchemaControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectBudgetSchemaControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjectBudgetSchema(options?: any): AxiosPromise<ListProjectBudgetSchemaResponse> {
            return localVarFp.getAllProjectBudgetSchema(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectBudgetSchemaControllerApi - object-oriented interface
 * @export
 * @class ProjectBudgetSchemaControllerApi
 * @extends {BaseAPI}
 */
export class ProjectBudgetSchemaControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectBudgetSchemaControllerApi
     */
    public getAllProjectBudgetSchema(options?: RawAxiosRequestConfig) {
        return ProjectBudgetSchemaControllerApiFp(this.configuration).getAllProjectBudgetSchema(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProjectControllerApi - axios parameter creator
 * @export
 */
export const ProjectControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} projectId 
         * @param {AddPersonToProjectRequest} addPersonToProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPersonToProject: async (projectId: string, addPersonToProjectRequest: AddPersonToProjectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('addPersonToProject', 'projectId', projectId)
            // verify required parameter 'addPersonToProjectRequest' is not null or undefined
            assertParamExists('addPersonToProject', 'addPersonToProjectRequest', addPersonToProjectRequest)
            const localVarPath = `/project/{projectId}/add-person-to-project/`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addPersonToProjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateProjectRequest} createProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject: async (createProjectRequest: CreateProjectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProjectRequest' is not null or undefined
            assertParamExists('createProject', 'createProjectRequest', createProjectRequest)
            const localVarPath = `/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeopleOnProjectByProjectId: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getPeopleOnProjectByProjectId', 'projectId', projectId)
            const localVarPath = `/project/{projectId}/people`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProject', 'projectId', projectId)
            const localVarPath = `/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectStatistics: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectStatistics', 'projectId', projectId)
            const localVarPath = `/project/{projectId}/statistics`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PageInfoRequest} pageInfo 
         * @param {ProjectSortInfoRequest} [sortInfo] 
         * @param {ProjectListSearchParams} [searchParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjects: async (pageInfo: PageInfoRequest, sortInfo?: ProjectSortInfoRequest, searchParams?: ProjectListSearchParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageInfo' is not null or undefined
            assertParamExists('listProjects', 'pageInfo', pageInfo)
            const localVarPath = `/project/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageInfo !== undefined) {
                for (const [key, value] of Object.entries(pageInfo)) {
                    localVarQueryParameter[key] = value;
                }
            }

            if (sortInfo !== undefined) {
                for (const [key, value] of Object.entries(sortInfo)) {
                    localVarQueryParameter[key] = value;
                }
            }

            if (searchParams !== undefined) {
                for (const [key, value] of Object.entries(searchParams)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjectsStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/project/list/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {UpdateProjectRequest} updateProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject: async (projectId: string, updateProjectRequest: UpdateProjectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateProject', 'projectId', projectId)
            // verify required parameter 'updateProjectRequest' is not null or undefined
            assertParamExists('updateProject', 'updateProjectRequest', updateProjectRequest)
            const localVarPath = `/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectControllerApi - functional programming interface
 * @export
 */
export const ProjectControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} projectId 
         * @param {AddPersonToProjectRequest} addPersonToProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPersonToProject(projectId: string, addPersonToProjectRequest: AddPersonToProjectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPersonToProject(projectId, addPersonToProjectRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectControllerApi.addPersonToProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateProjectRequest} createProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProject(createProjectRequest: CreateProjectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceCreatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProject(createProjectRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectControllerApi.createProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPeopleOnProjectByProjectId(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPeopleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPeopleOnProjectByProjectId(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectControllerApi.getPeopleOnProjectByProjectId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProject(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProject(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectControllerApi.getProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectStatistics(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectStatisticsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectStatistics(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectControllerApi.getProjectStatistics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PageInfoRequest} pageInfo 
         * @param {ProjectSortInfoRequest} [sortInfo] 
         * @param {ProjectListSearchParams} [searchParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProjects(pageInfo: PageInfoRequest, sortInfo?: ProjectSortInfoRequest, searchParams?: ProjectListSearchParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProjects(pageInfo, sortInfo, searchParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectControllerApi.listProjects']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProjectsStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectListStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProjectsStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectControllerApi.listProjectsStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {UpdateProjectRequest} updateProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProject(projectId: string, updateProjectRequest: UpdateProjectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProject(projectId, updateProjectRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectControllerApi.updateProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectControllerApi - factory interface
 * @export
 */
export const ProjectControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} projectId 
         * @param {AddPersonToProjectRequest} addPersonToProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPersonToProject(projectId: string, addPersonToProjectRequest: AddPersonToProjectRequest, options?: any): AxiosPromise<void> {
            return localVarFp.addPersonToProject(projectId, addPersonToProjectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateProjectRequest} createProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(createProjectRequest: CreateProjectRequest, options?: any): AxiosPromise<ResourceCreatedResponse> {
            return localVarFp.createProject(createProjectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeopleOnProjectByProjectId(projectId: string, options?: any): AxiosPromise<GetPeopleResponse> {
            return localVarFp.getPeopleOnProjectByProjectId(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject(projectId: string, options?: any): AxiosPromise<GetProjectResponse> {
            return localVarFp.getProject(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectStatistics(projectId: string, options?: any): AxiosPromise<ProjectStatisticsResponse> {
            return localVarFp.getProjectStatistics(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PageInfoRequest} pageInfo 
         * @param {ProjectSortInfoRequest} [sortInfo] 
         * @param {ProjectListSearchParams} [searchParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjects(pageInfo: PageInfoRequest, sortInfo?: ProjectSortInfoRequest, searchParams?: ProjectListSearchParams, options?: any): AxiosPromise<ListProjectResponse> {
            return localVarFp.listProjects(pageInfo, sortInfo, searchParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjectsStatus(options?: any): AxiosPromise<ProjectListStatusResponse> {
            return localVarFp.listProjectsStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectId 
         * @param {UpdateProjectRequest} updateProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject(projectId: string, updateProjectRequest: UpdateProjectRequest, options?: any): AxiosPromise<UpdateProjectResponse> {
            return localVarFp.updateProject(projectId, updateProjectRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectControllerApi - object-oriented interface
 * @export
 * @class ProjectControllerApi
 * @extends {BaseAPI}
 */
export class ProjectControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} projectId 
     * @param {AddPersonToProjectRequest} addPersonToProjectRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public addPersonToProject(projectId: string, addPersonToProjectRequest: AddPersonToProjectRequest, options?: RawAxiosRequestConfig) {
        return ProjectControllerApiFp(this.configuration).addPersonToProject(projectId, addPersonToProjectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateProjectRequest} createProjectRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public createProject(createProjectRequest: CreateProjectRequest, options?: RawAxiosRequestConfig) {
        return ProjectControllerApiFp(this.configuration).createProject(createProjectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public getPeopleOnProjectByProjectId(projectId: string, options?: RawAxiosRequestConfig) {
        return ProjectControllerApiFp(this.configuration).getPeopleOnProjectByProjectId(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public getProject(projectId: string, options?: RawAxiosRequestConfig) {
        return ProjectControllerApiFp(this.configuration).getProject(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public getProjectStatistics(projectId: string, options?: RawAxiosRequestConfig) {
        return ProjectControllerApiFp(this.configuration).getProjectStatistics(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PageInfoRequest} pageInfo 
     * @param {ProjectSortInfoRequest} [sortInfo] 
     * @param {ProjectListSearchParams} [searchParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public listProjects(pageInfo: PageInfoRequest, sortInfo?: ProjectSortInfoRequest, searchParams?: ProjectListSearchParams, options?: RawAxiosRequestConfig) {
        return ProjectControllerApiFp(this.configuration).listProjects(pageInfo, sortInfo, searchParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public listProjectsStatus(options?: RawAxiosRequestConfig) {
        return ProjectControllerApiFp(this.configuration).listProjectsStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectId 
     * @param {UpdateProjectRequest} updateProjectRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public updateProject(projectId: string, updateProjectRequest: UpdateProjectRequest, options?: RawAxiosRequestConfig) {
        return ProjectControllerApiFp(this.configuration).updateProject(projectId, updateProjectRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SalaryControllerApi - axios parameter creator
 * @export
 */
export const SalaryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateSalaryRequest} createSalaryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalaryForPerson: async (createSalaryRequest: CreateSalaryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSalaryRequest' is not null or undefined
            assertParamExists('createSalaryForPerson', 'createSalaryRequest', createSalaryRequest)
            const localVarPath = `/salary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSalaryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalaryControllerApi - functional programming interface
 * @export
 */
export const SalaryControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalaryControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateSalaryRequest} createSalaryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSalaryForPerson(createSalaryRequest: CreateSalaryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceCreatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSalaryForPerson(createSalaryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalaryControllerApi.createSalaryForPerson']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SalaryControllerApi - factory interface
 * @export
 */
export const SalaryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalaryControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateSalaryRequest} createSalaryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSalaryForPerson(createSalaryRequest: CreateSalaryRequest, options?: any): AxiosPromise<ResourceCreatedResponse> {
            return localVarFp.createSalaryForPerson(createSalaryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SalaryControllerApi - object-oriented interface
 * @export
 * @class SalaryControllerApi
 * @extends {BaseAPI}
 */
export class SalaryControllerApi extends BaseAPI {
    /**
     * 
     * @param {CreateSalaryRequest} createSalaryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalaryControllerApi
     */
    public createSalaryForPerson(createSalaryRequest: CreateSalaryRequest, options?: RawAxiosRequestConfig) {
        return SalaryControllerApiFp(this.configuration).createSalaryForPerson(createSalaryRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TaskControllerApi - axios parameter creator
 * @export
 */
export const TaskControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} taskId 
         * @param {string} personId 
         * @param {AddPersonToTaskRequest} addPersonToTaskRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignPersonToTask: async (taskId: string, personId: string, addPersonToTaskRequest: AddPersonToTaskRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('assignPersonToTask', 'taskId', taskId)
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('assignPersonToTask', 'personId', personId)
            // verify required parameter 'addPersonToTaskRequest' is not null or undefined
            assertParamExists('assignPersonToTask', 'addPersonToTaskRequest', addPersonToTaskRequest)
            const localVarPath = `/task/{taskId}/assign-person/{personId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)))
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addPersonToTaskRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateTaskRequest} createTaskRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTask: async (createTaskRequest: CreateTaskRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTaskRequest' is not null or undefined
            assertParamExists('createTask', 'createTaskRequest', createTaskRequest)
            const localVarPath = `/task`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTaskRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} taskId 
         * @param {UpdateTaskRequest} updateTaskRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask: async (taskId: string, updateTaskRequest: UpdateTaskRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('updateTask', 'taskId', taskId)
            // verify required parameter 'updateTaskRequest' is not null or undefined
            assertParamExists('updateTask', 'updateTaskRequest', updateTaskRequest)
            const localVarPath = `/task/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTaskRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskControllerApi - functional programming interface
 * @export
 */
export const TaskControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} taskId 
         * @param {string} personId 
         * @param {AddPersonToTaskRequest} addPersonToTaskRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignPersonToTask(taskId: string, personId: string, addPersonToTaskRequest: AddPersonToTaskRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignPersonToTask(taskId, personId, addPersonToTaskRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskControllerApi.assignPersonToTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateTaskRequest} createTaskRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTask(createTaskRequest: CreateTaskRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceCreatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTask(createTaskRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskControllerApi.createTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} taskId 
         * @param {UpdateTaskRequest} updateTaskRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTask(taskId: string, updateTaskRequest: UpdateTaskRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTask(taskId, updateTaskRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskControllerApi.updateTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TaskControllerApi - factory interface
 * @export
 */
export const TaskControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} taskId 
         * @param {string} personId 
         * @param {AddPersonToTaskRequest} addPersonToTaskRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignPersonToTask(taskId: string, personId: string, addPersonToTaskRequest: AddPersonToTaskRequest, options?: any): AxiosPromise<void> {
            return localVarFp.assignPersonToTask(taskId, personId, addPersonToTaskRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateTaskRequest} createTaskRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTask(createTaskRequest: CreateTaskRequest, options?: any): AxiosPromise<ResourceCreatedResponse> {
            return localVarFp.createTask(createTaskRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} taskId 
         * @param {UpdateTaskRequest} updateTaskRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask(taskId: string, updateTaskRequest: UpdateTaskRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateTask(taskId, updateTaskRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskControllerApi - object-oriented interface
 * @export
 * @class TaskControllerApi
 * @extends {BaseAPI}
 */
export class TaskControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} taskId 
     * @param {string} personId 
     * @param {AddPersonToTaskRequest} addPersonToTaskRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public assignPersonToTask(taskId: string, personId: string, addPersonToTaskRequest: AddPersonToTaskRequest, options?: RawAxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).assignPersonToTask(taskId, personId, addPersonToTaskRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateTaskRequest} createTaskRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public createTask(createTaskRequest: CreateTaskRequest, options?: RawAxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).createTask(createTaskRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} taskId 
     * @param {UpdateTaskRequest} updateTaskRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public updateTask(taskId: string, updateTaskRequest: UpdateTaskRequest, options?: RawAxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).updateTask(taskId, updateTaskRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkPackageControllerApi - axios parameter creator
 * @export
 */
export const WorkPackageControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateWorkPackageRequest} createWorkPackageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkPackage: async (createWorkPackageRequest: CreateWorkPackageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createWorkPackageRequest' is not null or undefined
            assertParamExists('createWorkPackage', 'createWorkPackageRequest', createWorkPackageRequest)
            const localVarPath = `/work-package`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWorkPackageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workPackageId 
         * @param {UpdateWorkPackageRequest} updateWorkPackageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkPackage: async (workPackageId: string, updateWorkPackageRequest: UpdateWorkPackageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workPackageId' is not null or undefined
            assertParamExists('updateWorkPackage', 'workPackageId', workPackageId)
            // verify required parameter 'updateWorkPackageRequest' is not null or undefined
            assertParamExists('updateWorkPackage', 'updateWorkPackageRequest', updateWorkPackageRequest)
            const localVarPath = `/work-package/{workPackageId}`
                .replace(`{${"workPackageId"}}`, encodeURIComponent(String(workPackageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateWorkPackageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkPackageControllerApi - functional programming interface
 * @export
 */
export const WorkPackageControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkPackageControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateWorkPackageRequest} createWorkPackageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorkPackage(createWorkPackageRequest: CreateWorkPackageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceCreatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkPackage(createWorkPackageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkPackageControllerApi.createWorkPackage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workPackageId 
         * @param {UpdateWorkPackageRequest} updateWorkPackageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWorkPackage(workPackageId: string, updateWorkPackageRequest: UpdateWorkPackageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkPackage(workPackageId, updateWorkPackageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkPackageControllerApi.updateWorkPackage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkPackageControllerApi - factory interface
 * @export
 */
export const WorkPackageControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkPackageControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateWorkPackageRequest} createWorkPackageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkPackage(createWorkPackageRequest: CreateWorkPackageRequest, options?: any): AxiosPromise<ResourceCreatedResponse> {
            return localVarFp.createWorkPackage(createWorkPackageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} workPackageId 
         * @param {UpdateWorkPackageRequest} updateWorkPackageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkPackage(workPackageId: string, updateWorkPackageRequest: UpdateWorkPackageRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateWorkPackage(workPackageId, updateWorkPackageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkPackageControllerApi - object-oriented interface
 * @export
 * @class WorkPackageControllerApi
 * @extends {BaseAPI}
 */
export class WorkPackageControllerApi extends BaseAPI {
    /**
     * 
     * @param {CreateWorkPackageRequest} createWorkPackageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkPackageControllerApi
     */
    public createWorkPackage(createWorkPackageRequest: CreateWorkPackageRequest, options?: RawAxiosRequestConfig) {
        return WorkPackageControllerApiFp(this.configuration).createWorkPackage(createWorkPackageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} workPackageId 
     * @param {UpdateWorkPackageRequest} updateWorkPackageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkPackageControllerApi
     */
    public updateWorkPackage(workPackageId: string, updateWorkPackageRequest: UpdateWorkPackageRequest, options?: RawAxiosRequestConfig) {
        return WorkPackageControllerApiFp(this.configuration).updateWorkPackage(workPackageId, updateWorkPackageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



